generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  name                String
  email               String          @unique
  role                UserRole        @default(USER)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  id                  String          @id @default(uuid()) @db.Uuid
  allowedOriginsAdded AllowedOrigin[] @relation("UserAddedOrigins")
  apiKeysCreated      ApiKey[]        @relation("ApiKeyCreatedBy")
  apiKeysUpdated      ApiKey[]        @relation("ApiKeyUpdatedBy")
  auditLogsPerformed  AuditLog[]      @relation("AuditLogPerformedBy")
  featureFlagsCreated FeatureFlag[]   @relation("FeatureFlagCreatedBy")
  featureFlagsUpdated FeatureFlag[]   @relation("FeatureFlagUpdatedBy")
  betaUser            beta_users?
}

model FeatureFlag {
  name              String
  description       String?
  enabled           Boolean  @default(false)
  environment       String
  rolloutPercentage Int      @default(0)
  version           Int      @default(1)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  id                String   @id @default(uuid()) @db.Uuid
  createdById       String?  @db.Uuid
  updatedById       String?  @db.Uuid
  createdBy         User?    @relation("FeatureFlagCreatedBy", fields: [createdById], references: [id])
  updatedBy         User?    @relation("FeatureFlagUpdatedBy", fields: [updatedById], references: [id])
}

model AuditLog {
  action        String
  flagId        String
  flagName      String
  details       String?
  createdAt     DateTime @default(now())
  id            String   @id @default(uuid()) @db.Uuid
  performedById String?  @db.Uuid
  performedBy   User?    @relation("AuditLogPerformedBy", fields: [performedById], references: [id])
}

model ApiKey {
  hashedKey   String    @unique
  owner       String?
  scopes      String?
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  createdById String?   @db.Uuid
  updatedById String?   @db.Uuid
  prefix      String
  id          String    @id @default(uuid()) @db.Uuid
  createdBy   User?     @relation("ApiKeyCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?     @relation("ApiKeyUpdatedBy", fields: [updatedById], references: [id])

  @@index([prefix])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model wait_list_signup {
  id         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  email      String         @unique
  company    String?
  role       String?
  challenges String?
  created_at DateTime       @default(now()) @db.Timestamptz(6)
  status     WaitListStatus @default(PENDING)
}

model AllowedOrigin {
  id        Int      @id @default(autoincrement())
  origin    String   @unique
  projectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  addedById String?  @db.Uuid
  addedBy   User?    @relation("UserAddedOrigins", fields: [addedById], references: [id])
}

model root_users {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String   @unique
  created_at DateTime @default(now()) @db.Timestamptz(6)
}

model beta_users {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String    @unique
  userId         String?   @unique @db.Uuid
  first_login_at DateTime?
  last_login_at  DateTime?
  invite_token   String?
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  user           User?     @relation(fields: [userId], references: [id])
}

model OutreachRecord {
  id           String    @id @default(uuid())
  name         String
  platform     String
  handle       String
  outreachDate DateTime
  message      String
  status       Status    @default(Sent)
  outcome      Outcome   @default(Pending)
  responseDate DateTime?
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Campaign {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  description    String?
  startDate      DateTime
  duration       Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  CampaignTarget CampaignTarget[]
}

model CampaignTarget {
  id            String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaignId    String             @db.Uuid
  title         String
  description   String?
  type          CampaignTargetType
  platform      String
  target        Int
  icon          String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime
  Campaign      Campaign           @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  DailyProgress DailyProgress[]
}

model DailyProgress {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaignTargetId String         @db.Uuid
  date             DateTime       @db.Date
  progress         Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  CampaignTarget   CampaignTarget @relation(fields: [campaignTargetId], references: [id], onDelete: Cascade)

  @@unique([campaignTargetId, date])
}

enum UserRole {
  USER
  ADMIN
  DEV
  PRODUCT_MANAGER
}

enum WaitListStatus {
  APPROVED
  PENDING
  REVOKED
}

enum Outcome {
  Pending
  Positive
  Negative
  Neutral
}

enum Status {
  Sent
  Responded
  Declined
  Bounced
}

enum CampaignTargetType {
  OUTREACH
  CONTENT
  ENGAGEMENT
}
