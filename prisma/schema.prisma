generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider    = "postgresql"
  url         = env("DATABASE_URL")
  directUrl   = env("DIRECT_URL")
}

// Roles for access control
enum UserRole {
  USER
  ADMIN
  DEV
  PRODUCT_MANAGER
}

model User {
  id                  String          @id @default(uuid()) @db.Uuid
  name                String
  email               String          @unique
  role                UserRole        @default(USER)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  featureFlagsCreated FeatureFlag[]   @relation("FeatureFlagCreatedBy")
  featureFlagsUpdated FeatureFlag[]   @relation("FeatureFlagUpdatedBy")
  auditLogsPerformed  AuditLog[]      @relation("AuditLogPerformedBy")
  apiKeysCreated      ApiKey[]        @relation("ApiKeyCreatedBy")
  apiKeysUpdated      ApiKey[]        @relation("ApiKeyUpdatedBy")
}

model FeatureFlag {
  id                 String    @id @default(uuid()) @db.Uuid
  name               String
  description        String?
  enabled            Boolean   @default(false)
  environment        String
  rolloutPercentage  Int       @default(0)
  version            Int       @default(1)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  createdById        String?   @db.Uuid
  updatedById        String?   @db.Uuid
  createdBy          User?     @relation("FeatureFlagCreatedBy", fields: [createdById], references: [id])
  updatedBy          User?     @relation("FeatureFlagUpdatedBy", fields: [updatedById], references: [id])
}

model AuditLog {
  id                String    @id @default(uuid()) @db.Uuid
  action            String
  flagId            String
  flagName          String

  performedById     String?   @db.Uuid
  performedBy       User?     @relation("AuditLogPerformedBy", fields: [performedById], references: [id])

  details           String?
  createdAt         DateTime  @default(now())
}

model PlaygroundFeatureFlag {
  id                 String   @id @default(uuid()) @db.Uuid
  session_id         String
  flag_key           String
  enabled            Boolean  @default(false)
  rollout_percentage Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([session_id, flag_key])
  @@map("Playground")
}

model ApiKey {
  id            Int       @id @default(autoincrement())
  hashedKey     String    @unique
  owner         String?
  scopes        String?
  lastUsedAt    DateTime?
  expiresAt     DateTime?
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)

  createdById   String?   @db.Uuid
  updatedById   String?   @db.Uuid
  createdBy     User?     @relation("ApiKeyCreatedBy", fields: [createdById], references: [id])
  updatedBy     User?     @relation("ApiKeyUpdatedBy", fields: [updatedById], references: [id])
}
