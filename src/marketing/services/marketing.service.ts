import { Injectable } from '@nestjs/common';
import { CreateOutreachRecordDto } from '../dtos/create-outreach-record.dto';
import { UpdateOutreachRecordDto } from '../dtos/update-outreach-record.dto';
import { PrismaService } from '../../prisma/prisma.service';
import { Outcome, Status } from '@prisma/client';

@Injectable()
export class MarketingService {
  constructor(private readonly prisma: PrismaService) {}
  getOutReachData() {
    // Mock data for the dashboard
    return {
      message: 'Welcome to the Marketing Dashboard!',
      stats: {
        users: 1200,
        campaigns: 45,
        conversions: 300,
      },
    };
  }

  async createOutreachRecord(createOutreachRecordDto: CreateOutreachRecordDto) {
    // The id and updatedAt fields are auto-generated by Prisma
    const data: any = {
      name: createOutreachRecordDto.name,
      platform: createOutreachRecordDto.platform,
      handle: createOutreachRecordDto.handle,
      outreachDate: new Date(createOutreachRecordDto.outreachDate),
      message: createOutreachRecordDto.message,
      status: createOutreachRecordDto.status,
      outcome: createOutreachRecordDto.outcome,
      responseDate: createOutreachRecordDto.responseDate ? new Date(createOutreachRecordDto.responseDate) : null,
    };
    if (createOutreachRecordDto.notes !== undefined) {
      data.notes = createOutreachRecordDto.notes;
    }

    const record = await this.prisma.outreachRecord.create({
      data,
    });
    
    return { message: 'Outreach record created successfully', data: record };
  }

  async updateOutreachRecord(id: string, updateOutreachRecordDto: UpdateOutreachRecordDto) {
    const updateData: any = {};
    
    // Only include fields that are provided in the DTO
    if (updateOutreachRecordDto.name) updateData.name = updateOutreachRecordDto.name;
    if (updateOutreachRecordDto.platform) updateData.platform = updateOutreachRecordDto.platform;
    if (updateOutreachRecordDto.handle) updateData.handle = updateOutreachRecordDto.handle;
    if (updateOutreachRecordDto.message) updateData.message = updateOutreachRecordDto.message;
    if (updateOutreachRecordDto.status) updateData.status = updateOutreachRecordDto.status as Status;
    if (updateOutreachRecordDto.outcome) updateData.outcome = updateOutreachRecordDto.outcome as Outcome;
    if (updateOutreachRecordDto.notes !== undefined) updateData.notes = updateOutreachRecordDto.notes;
    
    if (updateOutreachRecordDto.outreachDate) {
      updateData.outreachDate = new Date(updateOutreachRecordDto.outreachDate);
    }
    
    if (updateOutreachRecordDto.responseDate !== undefined) {
      updateData.responseDate = updateOutreachRecordDto.responseDate 
        ? new Date(updateOutreachRecordDto.responseDate) 
        : null;
    }
    
    const record = await this.prisma.outreachRecord.update({
      where: { id },
      data: updateData,
    });
    
    return { message: 'Outreach record updated successfully', data: record };
  }
  
  async getOutreachRecords() {
    const records = await this.prisma.outreachRecord.findMany({
      orderBy: { createdAt: 'desc' },
    });
    
    return records;
  }
  
  async getOutreachRecordById(id: string) {
    const record = await this.prisma.outreachRecord.findUnique({
      where: { id },
    });
    
    return record;
  }
  
  async deleteOutreachRecord(id: string) {
    await this.prisma.outreachRecord.delete({
      where: { id },
    });
    
    return { message: 'Outreach record deleted successfully' };
  }
}
